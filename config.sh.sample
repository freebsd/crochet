#
# CONFIGURATION
#

# Note: Only board_setup and IMAGE_SIZE should
# be required for building a standard image,
# assuming /usr/src has suitable FreeBSD
# sources.  Everything else below is optional.

# REQUIRED:
# Uncomment one to choose the default configuration for your board
#
# board_setup BeagleBone
# board_setup RaspberryPi
# board_setup PandaBoard
# board_setup VersatilePB

#
# Read board/<board-name>/README for more details
# about configuring for your particular board.
#
# The variables documented below are just
# a few of the most common ones.
#

# REQUIRED: IMAGE_SIZE
#
# Size of the disk image that will be built.  This is usually the same
# size as your memory card or disk drive, but it can be smaller.
#
# MB and GB are predefined for convenience here
#
# The sizes here are rounded down some to make sure they fit on a
# matching card.  ($MB, $GB are pre-defined as 1000000 and 1000000000,
# respectively.)
#
# IMAGE_SIZE=$((100 * MB)) # for kernel-only images
# IMAGE_SIZE=$((1950 * MB)) # for 2 Gigabyte card
# IMAGE_SIZE=$((3900 * MB)) # for 4 Gigabyte card
# IMAGE_SIZE=$((7900 * MB)) # for 8 Gigabyte card
# IMAGE_SIZE=$((15900 * MB)) # for 16 Gigabyte card
# IMAGE_SIZE=$((31900 * MB)) # for 32 Gigabyte card
#
# NEW:  You can now use "option ImageSize" to set this a little
# more conveniently.  For example:
#  option ImageSize 7900MB
# The ImageSize option also allows MiB and GiB if you
# really need power-of-two sizes.

#
# OPTIONAL STUFF
#
# Nothing below here is mandatory; setting a board and an IMAGE_SIZE
# should be enough to build a bootable image for a supported board.
#
# There are, of course, many other variables that you may want to
# tweak.  Some of the more popular are described below.  Many others
# can be found by reading the source code.  (Variables beginning with
# "_" should not be touched.)
#
# The most advanced customizations may require defining a "customize"
# shell function.  If you can't easily do what you want even with the
# "customize" hooks, consider defining a custom board definition or
# ask us for ideas.
# 

#
# Enabling optional build features.
#
# Look at the "option" directory for a list of supported optional
# features.  You can enable one or more of them with the "option"
# command.  A few examples:
#
# option AutoSize
#

# The board_setup above picks a default KERNCONF but you can override
# it here.  (Overriding here won't impact the default IMG filename;
# you may want to change that below as well.)
#
# KERNCONF=MYCONF

# The script assumes you're running a sufficiently recent copy of
# FreeBSD and have FreeBSD-CURRENT source code available in /usr/src.

# FreeBSD source that will be used for kernel, world, and ubldr.
#
# If you are already running on a sufficiently recent FreeBSD-CURRENT,
# you can just use /usr/src here.
#
# FREEBSD_SRC=/usr/src

# If you aren't running FreeBSD-CURRENT or cannot update /usr/src,
# then uncomment the following.
#
# This directory doesn't need to exist yet.  When you run the script,
# it will tell you how to get appropriate sources into this directory.
#
# FREEBSD_SRC=$TOPDIR/freebsd-src

# You probably will never override this, but you may need to
# understand it: WORKDIR holds all of the created files (in
# particular, the FreeBSD "obj" is redirected here).  It also holds a
# lot of log files: If something goes wrong, there's probably a record
# here.
#
# After successful world or kernel builds, a marker is put in this
# directory; subsequent runs of this script check for the marker and
# avoid rebuilding.  This makes it easy to tinker with the image
# layout and build without having to wait on all of FreeBSD to build
# every single time.
#
# In particular: If you need to do a clean build of everything from
# scratch, remove the contents of $WORKDIR first.
#
# WORKDIR=${TOPDIR}/work


# The name of the final disk image.
# This file will be as large as IMAGE_SIZE above, so make
# sure it's located somewhere with enough space.
#
# IMG=${WORKDIR}/FreeBSD-${KERNCONF}.img

# Uncomment to suppress installworld.  This is
# useful when experimenting with boot and kernel
# startup, since it greatly speeds up the image
# generation.  Set IMAGE_SIZE to 50 * MB or even smaller
# to really shorten your build/test cycles:
#
# unset FREEBSD_INSTALL_WORLD

# Uncomment to populate /usr/src with a copy
# of the sources the image was built with.
# You probably want at least a 4GB card.
#
# FREEBSD_INSTALL_USR_SRC=yes

# Uncomment to fetch a fresh /usr/ports tree and put
# it on the image.
#
# FREEBSD_INSTALL_USR_PORTS=yes

# Extra arguments for world.
#
# Passed to both buildworld and installworld.
# FREEBSD_WORLD_EXTRA_ARGS="DEBUG_FLAGS=-g"
# Passed to only one:
# FREEBSD_BUILDWORLD_EXTRA_ARGS="-DNOCLEAN"
# FREEBSD_INSTALLWORLD_EXTRA_ARGS=""

# Extra arguments for kernel.
#
# Passed to both buildkernel and installkernel.
# FREEBSD_KERNEL_EXTRA_ARGS=""
# Passed to only one:
# FREEBSD_BUILDKERNEL_EXTRA_ARGS="-DNOCLEAN"
# FREEBSD_INSTALLKERNEL_EXTRA_ARGS=""


# OVERLAY FILES
#
# Most customization simply consists of putting extra
# files onto the image.
#
# The contents of ${BOARDDIR}/overlay and ${WORKDIR}/overlay
# are copied over the image just before the generic
# customization hooks are run.  For example, you can
# put a custom passwd or fstab file into
# ${WORKDIR}/overlay/etc.  If this file needs to be
# built dynamically, you can build it right here.

# For example, if you want to just add an entry to fstab, try
# something like this:
#
# cp ${BOARDDIR}/overlay/etc/fstab ${WORKDIR}/overlay/etc/fstab
# echo "md /tmp mfs rw,noatime,-s30m 0 0" >> ${WORKDIR}/overlay/etc/fstab


# GENERIC CUSTOMIZATION HOOKS
#
# You can do arbitrary configuration by redefining
# the following shell functions.
#
# Most boards set up two partitions:
#  * A boot partition (often FAT formatted)
#    holds the various boot loaders.  This
#    varies significantly by board.
#  * A FreeBSD partition holds the FreeBSD world
#    (and usually kernel).
#
# The following functions are run after the
# default board setup has run, so you can feel
# free to delete or rearrange files on the image
# as you see fit.
#
# WARNING:  Unlike some other system-building scripts,
# these do *not* run in a chroot or jail.  (It can't
# because we're cross-building.)  For example, if you
# want to add an account, be sure to refer
# to etc/passwd and not /etc/passwd!
#
# Some useful shell variables:
#   ${WORKDIR} is the full path to the 'work' directory
#       which you can use for intermediate files
#   ${BOARDDIR} is the directory where the board specific files
#       are located
#   ${TOPDIR} is the current directory where crochet is located
#
# The lib/*.sh files also define a number of functions
# that you may find useful here.
#
# # Runs after boot partition is built.
# # $1 is the full path to the mounted boot partition
# customize_boot_partition ( ) {
# }
#
# Note that the following runs even if FREEBSD_INSTALL_KERNEL
# and FREEBSD_INSTALL_WORLD are not enabled.
#
# # Runs after FreeBSD partition is built and populated.
# # $1 is the full path to the mounted boot partition
# customize_freebsd_partition ( ) {
# }

# For example, here's another way to add an entry to the default fstab:
#
# customize_freebsd_partition ( ) {
#   echo "md /tmp mfs rw,noatime,-s30m 0 0" >> $1/etc/fstab
# }

# If you can't do what you want with the above, try this:
# customize_post_unmount is called after the image is fully created
# and unmounted.  $1 is the filename of the constructed image file.
# You can remount, resize partitions, change partition options, etc.
# If you do anything interesting with this, please let me know.  (I've
# never actually needed it and am dreadfully curious what someone
# might use it for.)
